- pipeline: "test"
  trigger_mode: "ON_EVERY_PUSH"
  ref_name: "refs/*"
  ref_type: "WILDCARD"
  fetch_all_refs: true
  trigger_condition: "ALWAYS"
  actions:
    - action: "Execute: composer tests"
      type: "BUILD"
      working_directory: "/buddy/repman"
      docker_image_name: "library/php"
      docker_image_tag: "7.4.1"
      execute_commands:
        - "composer validate"
        - "composer install"
        - "rm -rf var/cache"
        - "composer reset-db"
        - "composer tests"
      setup_commands:
        - "apt-get update && apt-get install -y git zip"
        - "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
        - ""
        - "# php ext pdo_pgsql"
        - "apt-get install -y libpq-dev"
        - "docker-php-ext-configure pdo_pgsql --with-pdo-pgsql"
        - "docker-php-ext-install pdo_pgsql"
        - ""
        - "# coverage driver"
        - "pecl install pcov && docker-php-ext-enable pcov"
        - ""
        - "# intl"
        - "apt-get install -y libicu-dev && \\"
        - "  docker-php-ext-configure intl && \\"
        - "  docker-php-ext-install intl"
        - ""
        - "# zip"
        - "apt-get install -y zip unzip libzip-dev"
        - "docker-php-ext-configure zip"
        - "docker-php-ext-install zip"
        - "  "
        - "echo \"memory_limit=-1\" >> /usr/local/etc/php/conf.d/buddy.ini"
      services:
        - type: "POSTGRE_SQL"
          version: "11.6-alpine"
          connection:
            host: "postgres"
            port: 5432
            user: "main"
            password: "main"
            db: "main"
      volume_mappings:
        - "/:/buddy/repman"
      shell: "BASH"
      trigger_condition: "ALWAYS"
    - action: "Run repman/deploy"
      type: "RUN_NEXT_PIPELINE"
      comment: "Triggered by $BUDDY_PIPELINE_NAME execution #$BUDDY_EXECUTION_ID"
      trigger_variable_value: "master"
      trigger_variable_key: "BUDDY_EXECUTION_BRANCH"
      revision: "INHERIT"
      trigger_condition: "VAR_IS"
      next_project_name: "repman"
      next_pipeline_name: "deploy"
  variables:
    - key: "DATABASE_URL"
      value: "postgresql://main:main@postgres:5432/main?serverVersion=11&charset=utf8"
      id: 324909
      description: ""
- pipeline: "security"
  trigger_mode: "SCHEDULED"
  ref_name: "master"
  ref_type: "BRANCH"
  start_date: "2020-02-05T07:00:00.000Z"
  delay: 1440
  fetch_all_refs: true
  trigger_condition: "ALWAYS"
  actions:
    - action: "Execute: composer security"
      type: "BUILD"
      working_directory: "/buddy/repman"
      docker_image_name: "library/php"
      docker_image_tag: "7.4.1"
      execute_commands:
        - "composer install --no-scripts"
        - "composer security"
      setup_commands:
        - "apt-get update && apt-get install -y git zip"
        - "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
        - ""
        - "# php ext pdo_pgsql"
        - "apt-get install -y libpq-dev"
        - "docker-php-ext-configure pdo_pgsql --with-pdo-pgsql"
        - "docker-php-ext-install pdo_pgsql"
        - ""
        - "# coverage driver"
        - "pecl install pcov && docker-php-ext-enable pcov"
        - ""
        - "# intl"
        - "apt-get install -y libicu-dev && \\"
        - "  docker-php-ext-configure intl && \\"
        - "  docker-php-ext-install intl"
        - ""
        - "# zip"
        - "apt-get install -y zip unzip libzip-dev"
        - "docker-php-ext-configure zip"
        - "docker-php-ext-install zip"
        - "  "
        - "echo \"memory_limit=-1\" >> /usr/local/etc/php/conf.d/buddy.ini"
      volume_mappings:
        - "/:/buddy/repman"
      shell: "BASH"
      trigger_condition: "ALWAYS"
  variables:
    - key: "DATABASE_URL"
      value: "postgresql://main:main@postgres:5432/main?serverVersion=11&charset=utf8"
      id: 324910
      description: ""
- pipeline: "setup"
  trigger_mode: "MANUAL"
  ref_name: "refs/heads/*"
  ref_type: "WILDCARD"
  fetch_all_refs: true
  trigger_condition: "ALWAYS"
  actions:
    - action: "Run setup playbook"
      type: "BUILD"
      working_directory: "/buddy/repman"
      docker_image_name: "library/ubuntu"
      docker_image_tag: "19.10"
      execute_commands:
        - "ansible-playbook ansible/setup.yml -i ansible/inventories/$REPMAN_ANSIBLE_INVENTORY"
      setup_commands:
        - "apt-get update && apt-get -y install ansible ssh python3-distutils"
        - "mkdir ~/.ssh && ssh-keyscan 3.136.55.89 >> ~/.ssh/known_hosts"
      volume_mappings:
        - "/:/buddy/repman"
      shell: "BASH"
      trigger_condition: "ALWAYS"
- pipeline: "deploy"
  trigger_mode: "MANUAL"
  ref_name: "master"
  ref_type: "BRANCH"
  target_site_url: "https://app.repman.io"
  fetch_all_refs: true
  trigger_condition: "ALWAYS"
  actions:
    - action: "Run deploy playbook"
      type: "BUILD"
      working_directory: "/buddy/repman"
      docker_image_name: "library/ubuntu"
      docker_image_tag: "19.10"
      execute_commands:
        - "ansible-playbook ansible/deploy.yml -i ansible/inventories/$REPMAN_ANSIBLE_INVENTORY"
      setup_commands:
        - "apt-get update && apt-get -y install ansible ssh python3-distutils"
        - "mkdir ~/.ssh && ssh-keyscan 3.136.55.89 >> ~/.ssh/known_hosts"
      volume_mappings:
        - "/:/buddy/repman"
      shell: "BASH"
      trigger_condition: "ALWAYS"
- pipeline: "app docker image"
  trigger_mode: "ON_EVERY_PUSH"
  ref_name: "refs/heads/*"
  ref_type: "WILDCARD"
  auto_clear_cache: true
  trigger_condition: "ALWAYS"
  actions:
  - action: "Lint Dockerfile"
    type: "DOCKERFILE_LINTER"
    local_path: "Dockerfile"
    shell_type: "bash"
    trigger_condition: "ALWAYS"
    ignore_errors: true
  - action: "Build app Docker image"
    type: "DOCKERFILE"
    dockerfile_path: "Dockerfile"
    build_args:
    - "TIMEZONE=UTC"
    trigger_condition: "ALWAYS"
  - action: "Run scripts"
    type: "RUN_DOCKER_CONTAINER"
    use_image_from_action: true
    docker_build_action_name: "Build app Docker image"
    inline_commands: "bash -c 'php -e -r \"echo 0;\"  && bin/console cache:warmup'"
    mount_filesystem_disable: true
    trigger_condition: "ALWAYS"
    shell: "SH"
    variables:
    - id: 336632
      key: "APP_DEBUG"
      value: "0"
      description: ""
    - id: 336633
      key: "APP_ENV"
      value: "prod"
      description: ""
    - id: 336634
      key: "APP_SECRET"
      value: "c7dbd995176e079f857b6649b60ccf68"
      description: ""
- pipeline: "nginx docker image"
  trigger_mode: "ON_EVERY_PUSH"
  ref_name: "refs/heads/*"
  ref_type: "WILDCARD"
  auto_clear_cache: true
  trigger_condition: "ALWAYS"
  actions:
  - action: "Lint Dockerfile"
    type: "DOCKERFILE_LINTER"
    local_path: "docker/nginx/Dockerfile"
    shell_type: "bash"
    trigger_condition: "ALWAYS"
    ignore_errors: true
  - action: "Build Docker image"
    type: "DOCKERFILE"
    dockerfile_path: "docker/nginx/Dockerfile"
    context_path: "docker/nginx/"
    build_args:
    - "DOMAIN=test-buddy.wip\nPHP_URL=localhost:9000"
    trigger_condition: "ALWAYS"
  - action: "Run Docker Image"
    type: "RUN_DOCKER_CONTAINER"
    use_image_from_action: true
    inline_commands: "nginx -t"
    mount_filesystem_disable: true
    trigger_condition: "ALWAYS"
    shell: "SH"
